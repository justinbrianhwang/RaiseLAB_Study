# -*- coding: utf-8 -*-
"""FGSM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-hi5yk8Sg1HDxG0XGCQSKT3yXZE-nmfo

# FGSM 공격코드

라이브러리 임포트
"""

import torch
import torch.nn as nn
import torchvision.transforms as transforms
from PIL import Image
import matplotlib.pyplot as plt

"""1. 이미지 불러오기 및 전처리"""

def load_image(image_path):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
    ])
    image = Image.open(image_path).convert("RGB")
    return transform(image).unsqueeze(0)  # Batch dimension 추가

"""2. 노이즈 생성 및 FGSM 공격 함수"""

def fgsm_attack(model, image, label, epsilon):
    image.requires_grad = True
    outputs = model(image)
    loss = nn.CrossEntropyLoss()(outputs, label)
    model.zero_grad()
    loss.backward()
    data_grad = image.grad.data
    perturbed_image = image + epsilon * data_grad.sign()
    perturbed_image = torch.clamp(perturbed_image, 0, 1)  # 값 범위 제한
    return perturbed_image, data_grad

"""3. 시각화 함수"""

def plot_images(original, noise, perturbed):
    original = original.squeeze().permute(1, 2, 0).detach().numpy()
    noise = noise.squeeze().permute(1, 2, 0).detach().numpy()
    perturbed = perturbed.squeeze().permute(1, 2, 0).detach().numpy()

    plt.figure(figsize=(12, 8))
    plt.subplot(1, 3, 1)
    plt.title("Original Image")
    plt.imshow(original)
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.title("Noise")
    plt.imshow(noise, cmap='gray')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.title("Perturbed Image")
    plt.imshow(perturbed)
    plt.axis('off')

    plt.show()

"""4. 코드 실행 부"""

if __name__ == "__main__":
    # 모델 정의 (Pretrained 모델 사용)
    from torchvision.models import resnet18
    model = resnet18(pretrained=True)
    model.eval()

    # 이미지 로드
    image_path = './John von neumann.jpg'
    image = load_image(image_path)

    # 임의의 라벨 설정 (모델이 예측한 라벨로 설정 가능)
    label = torch.tensor([0])  # 예: 0번 클래스

    # 엡실론 값 설정 및 반복
    epsilon_values = [0.01, 0.05, 0.1, 0.15, 0.2]  # 원하는 엡실론 값 리스트

    for epsilon in epsilon_values:
        print(f"Processing for epsilon = {epsilon}")

        # FGSM 공격 실행
        perturbed_image, noise = fgsm_attack(model, image, label, epsilon)

        # 노이즈만 추출
        noise_only = noise.sign() * epsilon

        # 시각화
        plot_images(image, noise_only, perturbed_image)